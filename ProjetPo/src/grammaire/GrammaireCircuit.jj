PARSER_BEGIN(GrammaireBoole)package grammaire;import java.io.File;import java.io.FileInputStream;import circuit.Circuit;import composant.*;
public class GrammaireBoole{  public static void main(String args []) throws ParseException  {
    try
    {
      File f = new File("test.txt");
      if(f == null || !f.exists())      {
        System.out.println("Erreur : Fichier incorrect !");
        return;      }
      GrammaireBoole parser = new GrammaireBoole(new FileInputStream(f));
      parser.Def_Circuit();
      System.out.println("Analyse terminee avec succes !");
	}
	catch (Exception e)
	{
	  System.out.println("Circuit non reconnu !");
	  System.out.println(e.getMessage());
	  GrammaireBoole.ReInit(System.in);
	}    catch (Error e)    {      System.out.println("Erreur d'execution");      System.out.println(e.getMessage());      return;    }  }  private static Composant genererComposant(String nom, String num)  {    Class<?> tcomp=null;	try {		tcomp = Class.forName("composant." + nom);	} catch (ClassNotFoundException e) {		e.printStackTrace();	}    Composant comp = null;	try {		comp = (composant.Composant) tcomp.newInstance();	} catch (InstantiationException e) {		e.printStackTrace();	} catch(IllegalAccessException e) {	  e.printStackTrace();	}    return comp;  } }PARSER_END(GrammaireBoole)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < NUM : (< DIGIT >)+ >| < ID : < LETTER > (< DIGIT > | < LETTER >)+>
| < LETTER : ["a"-"z","A"-"Z"] >
| < DIGIT : ["0" - "9"] >}
void Def_Circuit() :
{}{ < ID > Circuit()
}

void Circuit() :
{    Circuit circuit;}
{  {    circuit = new Circuit();  }
  (Composant(circuit))+}

void Composant(Circuit circuit) :
{	Composant comp;	Token x,y;}
{
  "<" x = < NUM > "|" y = < ID > Port() [Etat()] ["->" Connexion_Interne() ("," Connexion_Interne())*] ">"  {    System.out.print("La valeur de x : "+x);    System.out.println(" - La valeur de y : "+y);    circuit.ajouterComposant(GrammaireBoole.genererComposant(y.toString(),x.toString()));  }}

void Etat() :
{}
{
  "{" < ID > "}"}

void Port() :
{}
{
  "(" < NUM > "," < NUM > ")"}

void Connexion_Interne() :
{}
{
  "#" < NUM > "(" Connexion() ("," Connexion())* ")"}

void Connexion() :
{}
{
  < NUM > "#" < NUM >}